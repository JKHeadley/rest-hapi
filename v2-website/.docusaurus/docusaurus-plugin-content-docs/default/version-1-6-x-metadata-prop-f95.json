{
  "pluginId": "default",
  "version": "1.6.x",
  "label": "1.6.x",
  "banner": "unmaintained",
  "badge": true,
  "className": "docs-version-1.6.x",
  "isLast": false,
  "docsSidebars": {},
  "docs": {
    "version-1.6.x-associations": {
      "id": "version-1.6.x-associations",
      "title": "Associations",
      "description": "The rest-hapi framework supports model associations that mimic associations in a relational database.  This includes one-one, one-many, many-one, and many-many relationships.  Associations are created by adding the relevant schema fields and populating the `associations object within routeOptions.  Associations exists as references to a document's _id` field, and can be populated to return the associated object.  See Querying for more details on how to populate associations."
    },
    "version-1.6.x-audit-logs": {
      "id": "version-1.6.x-audit-logs",
      "title": "Audit Logs",
      "description": "By default, rest-hapi records all document-modifiying activities that occur within the generated endpoints. Each event is stored as a document within the auditLog collection.  The audit log documents can be set to expire by providing a value for config.auditLogTTL.  The value can be specified in integer seconds or as a human-readable time period (Ex"
    },
    "version-1.6.x-authentication": {
      "id": "version-1.6.x-authentication",
      "title": "Authentication",
      "description": "Route authentication"
    },
    "version-1.6.x-authorization": {
      "id": "version-1.6.x-authorization",
      "title": "Authorization",
      "description": "Route authorization"
    },
    "version-1.6.x-configuration": {
      "id": "version-1.6.x-configuration",
      "title": "Configuration",
      "description": "Configuration of rest-hapi is handled through the `RestHapi.config` object. See the introduction for an example.  Below is a description of the current configuration options/properties."
    },
    "version-1.6.x-creating-endpoints": {
      "id": "version-1.6.x-creating-endpoints",
      "title": "Creating Endpoints",
      "description": "Creating endpoints with rest-hapi can be accomplished three different ways:"
    },
    "version-1.6.x-duplicate-fields": {
      "id": "version-1.6.x-duplicate-fields",
      "title": "Duplicate Fields",
      "description": "\"Duplicate fields\" is a rest-hapi feature that allows fields from an associated document to exist in the parent document while maintaining the original field value. This can be accomplished by setting config.enableDuplicateFields to true and adding the duplicate property to an association definition."
    },
    "version-1.6.x-introduction": {
      "id": "version-1.6.x-introduction",
      "title": "Introduction",
      "description": "Requirements"
    },
    "version-1.6.x-metadata": {
      "id": "version-1.6.x-metadata",
      "title": "Metadata",
      "description": "Timestamps"
    },
    "version-1.6.x-middleware": {
      "id": "version-1.6.x-middleware",
      "title": "Middleware",
      "description": "CRUD"
    },
    "version-1.6.x-misc": {
      "id": "version-1.6.x-misc",
      "title": "Miscellaneous",
      "description": "Model generation"
    },
    "version-1.6.x-model-generation": {
      "id": "version-1.6.x-model-generation",
      "title": "Model Generation",
      "description": "In some situations models may be required before or without endpoint generation. For example some hapi plugins may require models to exist before the routes are registered. In these cases rest-hapi provides a `generateModels` function that can be called independently."
    },
    "version-1.6.x-mongoose-wrapper-methods": {
      "id": "version-1.6.x-mongoose-wrapper-methods",
      "title": "Mongoose Wrapper Methods",
      "description": "rest-hapi provides mongoose wrapper methods for the user to take advantage of in their server code. These methods provide several advantages including:"
    },
    "version-1.6.x-policies": {
      "id": "version-1.6.x-policies",
      "title": "Policies",
      "description": "rest-hapi comes with built-in support for policies via the mrhorse plugin. Policies provide a powerful method of applying the same business logic to multiple routes declaratively. They can be inserted at any point in the hapi request lifecycle, allowing you to layer your business logic in a clean, organized, and centralized manner. We highly recommend you learn more about the details and benefits of policies in the mrhorse readme."
    },
    "version-1.6.x-querying": {
      "id": "version-1.6.x-querying",
      "title": "Querying",
      "description": "Query parameters can be added to GET requests to filter responses.  These parameters"
    },
    "version-1.6.x-questions": {
      "id": "version-1.6.x-questions",
      "title": "Questions",
      "description": "If you have any questions/issues/feature requests, please feel free to open an issue.  We'd love to hear from you!"
    },
    "version-1.6.x-quick-start": {
      "id": "version-1.6.x-quick-start",
      "title": "Quick Start",
      "description": "Requirements"
    },
    "version-1.6.x-route-customization": {
      "id": "version-1.6.x-route-customization",
      "title": "Route Customization",
      "description": "Custom path names"
    },
    "version-1.6.x-soft-delete": {
      "id": "version-1.6.x-soft-delete",
      "title": "Soft Delete",
      "description": "rest-hapi supports soft delete functionality for documents.  When the config.enableSoftDelete property is set to `true, documents will gain an isDeleted property when they are created that will be set to false.  Whenever that document is deleted (via a rest-hapi endpoint or method), the document will remain in the collection, its isDeleted property will be set to true, and the deletedAt and deletedBy` properties (if enabled) will be populated."
    },
    "version-1.6.x-support": {
      "id": "version-1.6.x-support",
      "title": "Support",
      "description": "Like this project? Please star it!"
    },
    "version-1.6.x-swagger-documentation": {
      "id": "version-1.6.x-swagger-documentation",
      "title": "Swagger Documentation",
      "description": "Swagger documentation (via hapi-swagger) is automatically generated for all endpoints and can be viewed by pointing a browser at the server URL. If you use the intro script this will be http8080/. The swagger docs provide quick access to testing your endpoints along with model schema descriptions and query options."
    },
    "version-1.6.x-testing": {
      "id": "version-1.6.x-testing",
      "title": "Testing",
      "description": "If you have downloaded the source you can run the tests with:"
    },
    "version-1.6.x-validation": {
      "id": "version-1.6.x-validation",
      "title": "Validation",
      "description": "Route validation"
    }
  }
}